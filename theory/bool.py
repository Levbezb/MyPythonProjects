# В пайтон тип bool или boolean принимает только 2 значения: True и False

print(17 > 7)
print(17 == 7)
print(17 < 7)
'''
True
False
False
'''
'''Для создания произвольно сложных логических выражений (условий) мы используем три логические операции:

и (and);
или (or);
не (not).
'''

# Логические значения в Python можно трактовать как числа. Значению True соответствует число 1, в то время как значению False соответствует
# 0. Таким образом, мы можем сравнить логические значения с числами:

print(True == 1)    # True
print(False == 0)   # True

# Также можно применять и арифметические опреации:
print(True + True + True - False) # 3

'''Возможность трактовать булевы выражения как числа на практике используется не так часто. Однако есть один прием, который может 
оказаться полезным. Поскольку True равно 1, а False равно 0, сложение логических значений вместе – это быстрый способ подсчета 
количества значений True. Это можетпригодиться, когда требуется подсчитать количество элементов, удовлетворяющих условию.'''

numbers = [1, 2, 3, 4, 5, 8, 10, 12, 15, 17]
res = 0

for num in numbers:
    res += (num % 2 == 0)

print(res)

'''Для приведения других типов данных к булеву существует функция bool(), работающая по следующим соглашениям:

строки: пустая строка – ложь (False), непустая строка – истина (True);
числа: нулевое число – ложь (False), ненулевое число (в том числе и меньшее нуля) – истина (True);
списки: пустой список – ложь (False), непустой – истина (True).'''

print(bool('aaa'))  # True
print(bool('0'))    # False

#  Если функцию bool() вызвать без аргументов, то она вернет значение False.

# В языке Python имеется встроенная функция isinstance() для проверки соответствия типа объекта какому-либо типу данных.

print(isinstance(3, int))
print(isinstance(3.5, float))
print(isinstance('Beegeek', str))
print(isinstance([1, 2, 3], list))
print(isinstance(True, bool))


# В языке Python имеется встроенная функция type(), позволяющая получить тип указанного в качестве аргумента объекта.

print(type(3))
# <class 'int'>
print(type('str'))
# <class 'string'>
