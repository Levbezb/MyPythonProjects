name = input()      #команда input() считывает данные с клавиатуры, то есть со строки ввода
                    #следует учесть, что эта команда считывает строку текста, а не число
print("My name is ", name)      #команда print() выводит данные в компилятор

print('1', '2', '3', sep='+')     # также, чтобы вывести данные в компилятор, можно использовать необязательные параметры
                                  # sep='символ', этот параметр заполняет пробел, который был вызван наличием нескольких аргументов
                                  # (кавычек в принт) символом, который мы можем указать

print('1', '2', '3', end='-')     # и необязательный параметр end='символ' , он, заменяет перенос строки на символ, который мы можем указать
print('1', '2', '3', end='-')
                                 
                                  # изначално эти параметры выглядят так:
                                  # print('1', '2', '3', sep=' ')
                                  # print('1', '2', '3', end='\n')

print('f', 'f', 'f', sep='')      # также можно убрать пробелы вообще


object = '120'
number = int(object)   # С помощью функции int() можно преобразовать строку в число
print(number)

num = 100
obj = str(num)         # Также можно преобразовать число в строку с помощью функции str()

float_str = '12.1244'
float_num = float(float_str)    # Для числа с плавающей точкой есть отдельная функция float()

if 1 == 1:                        # Пример того, как работает условный оператор if else в питоне 
    print('True')
else:
    print('False')




if num > 1 and num < 200:         # В условном операторе if else есть логические операции and or и not  
    print('True')                 # Пример того, как они работают и пишутся
else:
    print('False')

if num > 1 or num == 0:
    print('True')
else:
    print('False')

if not (num < 0):                 # Логическая операция not действует также как минус в математике, то есть  
    print('True')                 # меняет все значения на противоположные: num >= 0
else:
    print('False')




if num < 200:                     # Пример вложенных условных операторов в питоне
    if num > 10:
        print('Yes')
    else:
        print('No')
else:
    print('Nan')


if num < 10:                      # Пример каскадного условия усл. опер. в питоне
    print('<10')                  # Не обязательно писать else в конце, если его не будет, цикл просто прекратится, ничего не сделав
elif num < 50:                    
    print('<50')
elif num < 150:
    print('<150')



a = 0
b = -10
c = 10

max_value = max(a, b, c)          # В питоне есть функции, которые находят наибольшее (max()) или наименьшее(min()) числа из введенных 
min_value = min(a, b, c)          # Они могут работать какс целыми числами, так и с дробными
abs_value = abs(b)                # Также есть функция, которая выполняет роль модуля - abs()



string1 = '123456789'
length = len(string1)             # Чтобы узнать длину строки, можно воспользоваться функцией len()

string2 = str(c)                  # Как мы уже знаем, можно преобразовать число в строку с помощью функции str()


string3 = '1' + string1 + string2 + '4'    # В питоне есть такая вещь, как конкатенация строк или сложение, склеивание
string4 = '-' * 25                         # В Python также можно умножать строку на число.
                                           # Такой оператор повторяет строку указанное количество раз
string5 = '''Привет.                       
Как дела?
Пока.'''                                   # Также можно воспользоваться тройными кавычками, чтобы записать текст на нескольких строках

string6 = 'qwertyuiop'
if 'w' in string6:                         # В Python есть специальный оператор in,
    print('yes')                           # который позволяет проверить, что одна строка находится внутри другой.


for i in range(5):                         # Пример работы цикла for i in range(): в питоне, цикл выполняется столько раз, сколько
    print(i)                        # вы напишете в скобках, после цикла нужно поставить двоеточие, тело цикла отделяется 4 пробелами
                                    # i это переменная цикла, которая является ее счетчиком, ее даже можно вывести в консоль
                            #  Если переменная цикла не используется в теле цикла, то указывайте вместо неё символ нижнего подчеркивания _
                            # for i in range(start)
                         
for i in range(4, 9):       # for i in range(start, stop),  это называется перегрузкой range
    print(i)                        # Будет выведены числа от 4 до 9 не включительно
                                    # В цикле можно указать 2 параметра range, чтобы отсчет чисел не начинался с нуля, а с какого либо числа
                                    # если первое число окажется больше второго, то цикл будет пустой, то есть ничего не сделает

for i in range(1, 50, 5):           # Также range можно перегрузить 3 параметрами, где 3 будет шагом, то есть отсчет начнется с первого
    print(i)                        # параметра, и каждое следующее значение i будет i + step(третье число)
                                    # for i in range(start, stop, step)
for i in range(30, 2, -4):
    print(i)                        # есть такое понятие, как отрицательный шаг генерации, то есть мы ожем указать в шаге отрицательное
                                    # число, но при этом первое число должно быть меньше второго, нежели цикл будет пустой

                                    # Также величина шага не может равняться нулю, это приведет к ошибке


x = 7
x += 5                      # В питоне существует такая вещь, как расширенные операторы присваивания, такие как:
                            # += -= *= /= %= //= , они заменяют код x = x + 5 на x += 5 , или например x = x // 6 на x //= 6 ,
                            # тем самым делая код проще 


                                    