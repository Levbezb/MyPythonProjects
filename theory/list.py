numbers = [1, 3, 5, 7, 9]                             
languages = ['java', 'python', 'c++']
                # В питоне вместо массива данных существует списки, list, и они являются аналогами массивов
                # список сохраняет в себе некоторую последовательность данных, как одного типа, так и разных
            # СПИСОК представляет собой последовательность данных, пронумированных от 0, как символы в строке
                # чтобы создать список нужно написать название переменной и задать данные в квадратных скобках []
                
list1 = []              # Можно создать пустой список двумя способами
list2 = list()


print(numbers)          # Для вывода всего списка можно использовать принт
# [1, 3, 5, 7, 9]         В таком случае будет выведены все элементы в квадратных скобках

num_range = list(range(5))      # Функция list() помимо создания пустого списка, может и преобразовывать некоторые типы обьектов в списки
                                # например range()
                    # Во время исполнения этого кода происходит следующее:

# Вызывается функция range(), в которую в качестве аргумента передается число 5;
# Эта функция возвращает последовательность чисел 0, 1, 2, 3, 4;
# Последовательность чисел 0, 1, 2, 3, 4 передается в качестве аргумента в функцию list();
# Функция list() возвращает список [0, 1, 2, 3, 4];
# Список [0, 1, 2, 3, 4] присваивается переменной numbers.

s = 'abcde'
chars = list(s)     # Точно так же с помощью функции list() мы можем создать список из символов строки


print(len(numbers))     # Можно найти длину списка, то есть количество его элементов
# 4

if 3 in numbers:        # Можно проверить находится ли символ в списке    
    print(True)         

n0 = numbers[0] # 1       # как и в строке, в списке есть индексация элементов
n1 = numbers[-5] # 1        также и отрицательные индексы

numbers[1] = 4             # Можно изменить содержимое массива, обращаясь по индексу


print(numbers[1:3])        # Срезы в списках работают также как в строках, только с элементами в списках
# [4, 5]

print([1, 2, 3, 4] + [5, 6, 7, 8])      # конкатенация и умножения на число в списках работает также как в строках
print([7, 8] * 3)
print([0] * 10)
# [1, 2, 3, 4, 5, 6, 7, 8]
# [7, 8, 7, 8, 7, 8]
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

a = [1, 2, 3, 4]
b = [7, 8]
a += b   # добавляем к списку a список b
b *= 5   # повторяем список b 5 раз 
    # также можно использовать операторы += -= *= и тд

print(sum(numbers))         # есть встроенная функция sum(), которая вычисляет сумму числового списка
# 25

mn = min(numbers)           # Функции min() и max() ищут самый маленький или самый большой элемент в списке
mx = max(numbers)

# Несмотря на всю схожесть списков и строк, есть одно очень важное отличие: строки — неизменяемые объекты, а списки – изменяемые.

lst = [1, 2, 3]
lst2 = [5, 6, 7]
lst.append(4)               # метод append() добавляет элемент в конец списка

lst.extend(lst2)            # метод extend() добавляет символы из 1 листа в другой, или в случае со строкой разбивает ее на символы и добавляет
lst2.extend('abcd')  # [5, 6, 7, 'a', 'b', 'c', 'd']    в случае с append() добавилась бы строка 'abcd' полностью

lt = ['a', 'c', 'h']
del lt[0]    # ['c', 'h']   с помощью оператора del можно удалить элемент из списка по определенному индексу
             # работает также и со срезами


print(*lt)                  # С помощью способа *название_списка в принте, можно "распаковать" список, то есть вывести все его значения через
                            # пробел, также работает со строками

s = 'Python is the most powerful language'
words = s.split()           # Метод split() разбивает строку на слова,
                            # используя в качестве разделителя последовательность пробельных символов, и возвращает список из этих слов
ip = '192.168.1.24'
numbers = ip.split('.')    # ['192', '168', '1', '24']       явно указываем разделитель
        # У метода split() есть необязательный параметр, который указывает символ, который будет являться разделителем между элементами списка

words = ['Python', 'is', 'the', 'most', 'powerful', 'language']
s = ' '.join(words)         # Метод join() собирает строку из элементов списка, используя в качестве разделителя строку,
                            # к которой применяется метод

words = ['apple', 'pen', 'peach']
words.insert(0, 'pineapple')        # В метод insert(), который вставляет в список значение в указанный индекс
# ['pineapple', 'apple', 'pen', 'peach']
            # Когда значение вставляется в список, список расширяется в размере, чтобы разместить новое значение. Значение, которое ранее 
            # находилось в заданной индексной позиции,и все элементы после него сдвигаются на одну позицию к концу списка.

pos = words.index('apple')  # Метод index() возвращает индекс первого элемента, значение которого равняется переданному в метод значению
# 1                           Если элемент в списке не найден, то во время выполнения происходит ошибка.
                            # Чтобы избежать таких ошибок, можно использовать метод index() вместе с оператором принадлежности in
if 'apple' in words:
    pos = words.index('apple')

words.remove('pineapple')   # Метод remove() удаляет первый элемент, значение которого равняется переданному в метод значению
                            # Если элемент в списке не найден, то во время выполнения происходит ошибка
            #  метод remove() удаляет только первый элемент с указанным значением. Все последующие его вхождения остаются в
            # списке. Чтобы удалить все вхождения, нужно использовать цикл while в связке с оператором принадлежности in и методом remove.

word = words.pop(1)         # Метод pop() удаляет элемент по указанному индексу и возвращает его.
                            # В метод pop() передается один необязательный аргумент, индекс элемента, который мы хотим удалить
            # сли индекс не указан, то метод удаляет и возвращает последний элемент списка. 
            # Если список пуст или указан индекс за пределами диапазона, то во время выполнения происходит ошибка

cnt = words.count('apple')  # Метод count() возвращает количество элементов, указанных в скобках, если таких элементов нет в списке, метод
                            # возвращает 0

words.reverse()             # Метод reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный 
                            # и возвращает значение None
            # Существует большая разница между вызовом метода names.reverse() и использованием среза names[::-1]. Метод reverse() меняет
            # порядок элементов на обратный в текущем списке, а срез создаёт копию списка, в котором элементы следуют в обратном порядке

words2 = words.copy()       # метод copy() создает копию списка, это можно сделать также с помощью среза [:] и функции list()

words.clear()               # Метод clear() удаляет все элементы из списка


numbers = [-5, -3, 3, 5, 2, -99, 55]
numbers.sort()              # метод sort() сортирует список по возрастанию
            # По умолчанию метод sort() сортирует список по возрастанию.
            #  Если требуется отсортировать список по убыванию, необходимо явно указать параметр reverse = True
a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
a.sort(reverse=True)  # сортируем по убыванию
            # метод sort() изменяет содержимое исходного списка и возвращает значение None

l = ['1', '2', '3']
l = [int(i) for i in l]     # Так можно быстро переберать числовой массив из типа string в тип int и это будет называться списочным 
                            # выражением, можно сказать, что списочные вырожения это компактная запись циклов

                # Примеры использования списочных выражений
# 1. Создать список, заполненный 10 нулями можно и при помощи списочного выражения:

zeros = [0 for i in range(10)]
                
# 2. Создать список, заполненный квадратами целых чисел от 0 до 9 можно так:

squares = [i ** 2 for i in range(10)]
                
# 3. Создать список, заполненный кубами целых чисел от 10 до 20 можно так:

cubes = [i ** 3 for i in range(10, 21)]
                 
# 4. Создать список, заполненный символами строки:

chars = [c for c in 'abcdefg']
print(chars)

# В списочных выражениях можно использовать условный оператор. Например, если требуется создать список чётных 
# чисел от 0 до 20, то мы можем написать такой код:

evens = [i for i in range(21) if i % 2 == 0]
# для того, чтобы получить список, состоящий из четных чисел, лучше использовать функцию range(0, 21, 2).
# Предыдущий пример приведен для демонстрации возможности использования условий в списочных выражениях.

# В списочном выражении можно использовать вложенные циклы.
numbers = [i * j for i in range(1, 5) for j in range(2)]
print(numbers)



