def print_my_name():            # Обьявление функции
    print('Привет')
    print('Меня зовут Лев')

# В питоне можно написать свою функцию, ее иногда называют подпрограммой, если вызвать функцию, она выполнит блок кода, заключенный в ней
print_my_name()                 # Вызов функции

# Обьявление функции должно быть написано раньше, либо произойдет ошибка

def do_nothing():
    pass

# иногда может понадобиться функция, которая ничего не будет делать, для этого используется ключевое слово pass

''' В ходе исполнения оператора pass ничего не происходит, поэтому он может использоваться в качестве заглушки в тех местах,
    где это синтаксически необходимо, например, в инструкциях, где тело является обязательным, таких как def. Таким образом,
    оператор pass используется там, где код пока ещё не появился, но планируется.'''


def draw_box(height, width):    # Функция с параметрами
    for i in range(height):
        print('*' * width)

# В функцию можно добавить параметры, и тем самым сделать ее более гибкой, данная функция рисует четырехугольник с произвольными 
# высотой и шириной
draw_box(5, 10)     # теперь на месте Переменных height width стоят Аргументы 5 10

h = 6
w = 11
draw_box(h, w)          # Можно передать аргументы через переменные

def people_in_my_family():
    count = 8                         # count это локальная переменная
    print(f'В моей семье {count} человек')  # Если локальная переменная count будет находиться после команды print, то произойдет ошибка

# Локальной переменной называют переменную, которая находится внутри функции, она не может взаимодействовать с обьектами вне функции

count = 8           # Это уже называется глобальной переменной, и к ней можно обращаться из любой части кода, который написан после ее 
                    # обьявления

def people():
    global people_count                 # в функции можно создать глобальную переменную
    people_count = 8000000000
    print(f'На земле около {people_count} людей')


def to_celsius(temp):                   # Данная функция перводит темпереатуру из градусов фаренгейта в цельсия
    result = (5 / 9) * (temp - 32)
    return result                       # Это пример использования функциис с возвратом значения

# функция с возвратом обязательно должна иметь инструкцию return, оно возвращает значение, как действие выполнения функции, без нее 
# функция будет возвращать значение None

result = to_celsius(19)
print(result)

# Функции с возвратом значения предоставляют те же преимущества, что функции без возврата значения:

# упрощают программный код;
# уменьшают дублирование кода;
# упрощают тестирование кода;
# увеличивают скорость разработки;
# способствуют работе в команде.

def is_true(age):                   # функция модет возвращать булевое значение
    if age == 16:
        return True
    else:
        return False

print(is_true(16))


