for i in range(5):                         # Пример работы цикла for i in range(): в питоне, цикл выполняется столько раз, сколько
    print(i)                        # вы напишете в скобках, после цикла нужно поставить двоеточие, тело цикла отделяется 4 пробелами
                                    # i это переменная цикла, которая является ее счетчиком, ее даже можно вывести в консоль
                            #  Если переменная цикла не используется в теле цикла, то указывайте вместо неё символ нижнего подчеркивания _
                            # for i in range(start)
                         
for i in range(4, 9):       # for i in range(start, stop),  это называется перегрузкой range
    print(i)                        # Будет выведены числа от 4 до 9 не включительно
                                    # В цикле можно указать 2 параметра range, чтобы отсчет чисел не начинался с нуля, а с какого либо числа
                                    # если первое число окажется больше второго, то цикл будет пустой, то есть ничего не сделает

for i in range(1, 50, 5):           # Также range можно перегрузить 3 параметрами, где 3 будет шагом, то есть отсчет начнется с первого
    print(i)                        # параметра, и каждое следующее значение i будет i + step(третье число)
                                    # for i in range(start, stop, step)
for i in range(30, 2, -4):
    print(i)                        # есть такое понятие, как отрицательный шаг генерации, то есть мы ожем указать в шаге отрицательное
                                    # число, но при этом первое число должно быть меньше второго, нежели цикл будет пустой

                                    # Также величина шага не может равняться нулю, это приведет к ошибке

i = 0
while i < 10:                       # Пример использования цикла while, его используют, чтобы выполнять какое либо действие до того, как
    print(True)                     # условие истинно
    i += 1                        
                                    # Цикл while  можно сделать бесконечным:
                                    # while True:
                                    #    print(1)

while i < 15:                       # В циклах есть такой оператор, который может преждевременно прервать цикл: break
    print(i)
    if i == 5:
        break
    i += 1

for i in range(10):                 # Оператор continue пропускает виток цикла
    print(i)
    if i == 3:
        continue

x = 5
while x != 0:                       # В цикле можно написать доп слово else , оно срабатывает только в том случае если цикл завершается                      
    x -= 1                          # штатным образом, то есть, если не используется команда break
    print(x)                        
else:
    print('Цикл завершен')          # Здесь блок команд else будет выполнен, потому что цикл завершился штатным образом

while x != 0:
    x -= 1                              # Команда continue  не влияет на выполнение else
    if x == 2:                          # Блок else в циклах часто применяется для обработки отсутствия элементов
        break
    print(x)
else:
    print('Цикл завершен')          # Здесь уже не будет выполнен, потому что есть комнад break         
    